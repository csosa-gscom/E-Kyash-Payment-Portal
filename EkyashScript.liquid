<script>
  (() => {
    if (window.localStorage) {
      if (!localStorage.getItem('reload')) {
        localStorage['reload'] = true;
        window.location.reload();
      } else {
        localStorage.removeItem('reload');
      }
    }
  })();
</script>

{% assign fulfillmentStatus = order.fulfillment_status %}
{% assign financialStatus = order.financial_status %}
{% assign paymentMethod = order.transactions[0].gateway %}

{% if paymentMethod == "E-Kyash" %}
  {% if fulfillmentStatus == "unfulfilled" and financialStatus == "pending" %}

    {% assign digiWalletLogo = "https://www.e-kyash.com/wp-content/uploads/2021/02/Site-logo-2-1.png" %}
    {% assign orderAmount = order.total_price | money_without_currency %}
    {% assign orderNumber = order.order_number %}
    {% assign orderItems = order.line_items | json %}

    <style>
      @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700 &display=swap");

      *.unselectable {
        -moz-user-select: -moz-none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }

      .app-frame {
        display: block;
        margin-top: 20px;
        overflow: visible;
        height: 300px;
        -moz-transition: height 0.5s;
        -ms-transition: height 0.5s;
        -o-transition: height 0.5s;
        -webkit-transition: height 0.5s;
        transition: height 0.5s;
      }

      .space-content {
        margin-top: 1rem;
      }

      :where(.step__footer, .section__header, ) {
        display: none !important;
      }

      :where(#declinedPaymentPage, #successPaymentPage, #mobilePage, #desktopPage, #serverUnresponsivePage, #qrCode, .section__content) {
        display: none;
      }

      :where(.card, .logo-container, .item-container, .errorMessage, .tac-input-field, ) {
        display: flex;
        justify-content: center;
      }

      .card {
        flex-direction: column;
        padding: 32px 16px;
        background-color: #ffffff;
        border: 1px solid #d9d9d9;
        border-radius: 8px;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      }

      .card .logo-container {
        align-self: center;
        width: 50%
      }

      .card p,
      .card button,
      .card span,
      .card input {
        font-family: "Poppins", sans-serif;
        color: #374151;
        font-size: 1rem;
        line-height: 1.5rem;
      }

      .card p,
      .card button {
        text-align: center;
      }

      .errorMessage {
        display: none;
        margin-top: 6px;
      }

      .errorMessage p {
        text-align: center;
        font-size: 0.8rem;
        color: red;
      }

      .verification-button {
        padding: 10px;
        width: 100%;
        min-width: 245px;
        max-width: 312px;

        color: #374151;
        background: #e7e7e7;


        border: none;
        border-radius: 0.5rem;

        cursor: pointer;
        pointer-events: none;
        transition: all 0.2s ease;
      }

      .verification-button.active {
        background: #4070f4;
        color: #fff;
        pointer-events: auto;
      }

      .verification-button:hover {
        background: #0e4bf1;
      }


      #successPaymentPage p {
        font-size: 1.5rem;
        line-height: 2rem;
      }

      .checkmark-payment-circle {
        stroke-dasharray: 166;
        stroke-dashoffset: 166;
        stroke-width: 2;
        stroke-miterlimit: 10;
        stroke: #7ac142;
        fill: none;
        animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards
      }

      .payment-checkmark {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: block;
        stroke-width: 2;
        stroke: #fff;
        stroke-miterlimit: 10;
        box-shadow: inset 0 0 0 #7ac142;
        animation: fill 0.4s ease-in-out 0.4s forwards, scale 0.3s ease-in-out 0.9s both
      }

      .payment-checkmark-check {
        transform-origin: 50% 50%;
        stroke-dasharray: 48;
        stroke-dashoffset: 48;
        animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards
      }

      .qrImage {
        padding: 2rem;
        margin-left: auto;
        margin-right: auto;
      }

      .spinner {
        width: 50px;
        height: 50px;
        display: inline-block;
        border-width: 2px;
        border-color: rgba(255, 255, 255, 0.05);
        border-top-color: #26bdf5;
        animation: spin 1s infinite linear;
        border-radius: 100%;
        border-style: solid;
      }

      @keyframes spin {
        100% {
          transform: rotate(360deg);
        }
      }

      @keyframes stroke {
        100% {
          stroke-dashoffset: 0;
        }
      }

      @keyframes scale {

        0,
        100% {
          transform: none;
        }

        50% {
          transform: scale3d(1.1, 1.1, 1);
        }
      }

      @keyframes fill {
        100% {
          box-shadow: inset 0 0 0 50px #7ac142;
        }
      }
    </style>


    <div class="app-frame" id="appframe">
      <div class="card" id="cardFrame">

        <div class="logo-container unselectable" id="digiLogo">
          <img src="https://www.e-kyash.com/wp-content/uploads/2021/02/Site-logo-2-1.png" alt="E-Kyash Logo">
        </div>

        <!-- SERVER UNRESPONSIVE PAGE-->
        <div id="serverUnresponsivePage">
          <p class="space-content" style="color:red">
            Unfortunately, there is an error with the server. Please try again later or use a different payment option.
          </p>
        </div>
        <!-- END OF SECTION-->

        <!-- MOBILE PAGE SECTION -->
        <div id="mobilePage">
          <h1>MOBILE PHONE WITH NOTIFICATION VECTOR</h1>
          <p>BIG BOLD Open the E-kyash notification on your phone</p>
          <P>E-kyash sent you a a payment request to your app. Tap the notification to go to the app.</P>
          <p>
            button to resend notifc to user by using link again. thus this is a button
          </p>
          <p>
            what needs to get done, after sending the user back i need a function that waits for a reply, ekyash will send this
          </p>
          <p>
            nut what if t</p>
        </div>
        <!-- END OF SECTION-->

        <!-- DESKTOP PAGE SECTION-->

        <div class="qrImage" id="desktopPage">
          <div id="spinner" style="text-align: center;">
            <span class="spinner"></span>
          </div>
          <div id="qrCode">
            <img
              id="qr"
              src=""
              alt="QR Code"
              width="185"
              height="auto">
          </div>
          <h1 class="space-content" style="font-weight: 900; text-align: center;">Scan to Pay</h1>
        </div>
        <!-- END OF SECTION-->

        <!-- PAYMENT CONFIRMED SECTION -->
        <div id="successPaymentPage">

          <div class="item-container space-content">
            <svg
              class="payment-checkmark"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 52 52">
              <circle
                class="checkmark-payment-circle"
                cx="26"
                cy="26"
                r="25"
                fill="none" />
              <path
                class="payment-checkmark-check"
                fill="none"
                d="M14.1 27.2l7.1 7.2 16.7-16.8" />
            </svg>
          </div>

          <div class="item-container space-content">
            <p>Payment Successfully Processed</p>
          </div>

        </div>
        <!-- END OF SECTION -->

        <!-- PAYMENT DECLINED SECTION -->
        <div id="declinedPaymentPage"></div>
        <!-- END OF SECTION -->

      </div>
    </div>

    <script>
      var sessionID = '';
      var invoiceId = '';
      var qrUrl = '';
      var qrData = '';
      var receiptUrl = '';
      var paymentLink = 'placeholder';
      var isMobile = false;

//    Checks to see if the server is running, if yes then it will intialize the client with a session ID
//    else it will display that the server is unresponsive
      var requestOptions = {
        method: 'GET',
        redirect: 'follow'
      };

      fetch("https://proxy.gs-com.bz/authorization", requestOptions).then(response => response.json()).then(result => {
        createNewInvoice(result);
        checkMobile();
      }).catch(error => {
        console.log('error', error);
        displayServerUnresponsivePage();
      });

      function displayServerUnresponsivePage() {
        document.getElementById("serverUnresponsivePage").style.display = "block";
      }

//    Checks if the user is using a mobile device or desktop and displays the appropriate pages
      function checkMobile() {
        var screenWidth = window.screen.width;

        if (screenWidth < 768) {
          if ("maxTouchPoints" in navigator) {
            isMobile = navigator.maxTouchPoints > 0;
          } else if ("msMaxTouchPoints" in navigator) {
            isMobile = navigator.msMaxTouchPoints > 0;
          } else {
            var mQ = window.matchMedia && matchMedia("(pointer:coarse)");
            if (mQ && mQ.media === "(pointer:coarse)") {
              isMobile = !! mQ.matches;
            } else if ('orientation' in window) {
              isMobile = true; // deprecated, but good fallback
            } else {
              var UA = navigator.userAgent;
              isMobile = (/\b(BlackBerry|webOS|iPhone|IEMobile|Mobile Safari)\b/i.test(UA) || /\b(Android|Windows Phone|iPad|iPod|Opera Mini)\b/i.test(UA));
            }
          }
        }
        if (isMobile) {
          runMobile();
        } else {
          runDesktop();
        }
      }

      function runMobile() {
        document.getElementById("mobilePage").style.display = "block";


      }

      function runDesktop() {
        document.getElementById("desktopPage").style.display = "block";
        createNewInvoice();
      }

//    API call to /create-new-invoice
      function createNewInvoice(data) {
        sessionID = data.session;
        var price = {{orderAmount}} * 100;
        var itemsNote = getItemsNote();


        var myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");

        var raw = JSON.stringify({
          "session": sessionID,
          "orderId": 110,
          "amount": price,
          "currency": "BZD",
          "description": itemsNote,
          "payer": null,
          "longTerm": null,
          "receipt": null,
          "dateLife": null,
          "fieldsOther": null,
          "fieldsApp": null
        });

        var requestOptions = {
          method: 'POST',
          headers: myHeaders,
          body: raw,
          redirect: 'follow'
        };

        fetch("https://proxy.gs-com.bz/create-new-invoice", requestOptions).then(response => response.json()).then(result => {
          if (isMobile) {
            getPaymentLink(result);
          } else {
            getQRCode(result);
          }

        }).catch(error => console.log('error', error));
      }

      function getPaymentLink(data) {
        console.log('LINK: ', data.paymentLink)
        window.open(data.paymentLink, "_blank");

// display new page with waiting for payment
// call function here waiting for callback to see if payment made, if it is hide all pages and display payment success page.
      }

      function getQRCode(data) {
        qrUrl = data.qrUrl;
        document.getElementById("spinner").style.display = "none";
        document.getElementById("qrCode").style.display = "block";
        document.getElementById("qr").src = qrUrl;
        console.log('QR URL: ', qrUrl)
      }



//    Gets the items from shopify and converts it into a string
      function getItemsNote() {
        var itemsArray = JSON.parse('{{ orderItems }}');
        const orderItemsString = itemsArray.reduce((accumulator, item, index) => {
          const itemString = `(${
            item.quantity
          }) ${
            item.title
          }`;
          if (index === itemsArray.length - 1) {
            return accumulator + itemString;
          } else {
            return accumulator + itemString + ',\n';
          }
        }, '');
        const itemsNote = `GS-COM Web Order:\n${orderItemsString}`;
        return itemsNote;
      }

//    Display Payment Declined Page
      function displayPaymentDeclined() {
        document.getElementById("declinedPaymentPage").style.display = "block"
      }

//    Display Payment Success Page
      function displayPaymentSuccess() {
        document.getElementById("successPaymentPage").style.display = "block";

        setTimeout(() => {
          var appframe = document.querySelector('#appframe');
          appframe.style.overflow = 'hidden';
          appframe.style.height = 0;
          document.getElementsByClassName('section__content')[0].style.display = 'block';
          document.getElementsByClassName('section__content')[1].style.display = 'block';
          document.getElementsByClassName('step__footer')[0].style.display = 'block !important';
          document.getElementsByClassName('section__header')[0].style.display = 'block !important';
        }, 2800)
      }
    </script>

  {% endif %}
{% endif %}